import { LineEdit, ComboBox } from "std-widgets.slint";
import { ItemInfo } from "item_info.slint";


export enum Category { Work, Utility, Entertainment, Travel, Food, Subscriptions }

export component ItemContainer inherits Rectangle {

    // Size of scroll view container.
    width: 410px;

    in-out property <int> item_index;

    in-out property <string> item_name <=> iname.text;
    in-out property <string> item_cost <=> icost.text;
    in-out property <Category> item_category <=> icategory.category;

    // Main Rectangle
    Rectangle {
        height: 65px;

        category_edit:= Rectangle {
            width: 25px;
            height: 25px;
            x: 20px;
            y: 0;
            z: 1;
            border-radius: 15px;
            border-color: black;
            border-width: 1px;

            Image {
                width: 20px;
                height: 20px;
                source: @image-url("../../logos/category logo.svg");

                TouchArea {
                    clicked => {
                        // change_category();
                        // changing_category = true;
                        category_choice.visible = true;
                    }
                }
            }
        }

        category_choice := Rectangle{
            visible: false;
            x: 45px;
            y: 0px;
            z: 1;
            height: 30px;
            width: 160px;
            background: white;
            ComboBox {
                model: [
                    "Entertainment",
                    "Food",
                    "Work",
                    "Subscriptions",
                    "Utility",
                    "Travel"
                ];
                selected(current-value) => {
                    category_choice.visible = false;

                    // I guess I don't require component names or "root" prefixes as much. 
                    item_category = 
                        current-value == "Entertainment" ?
                        Category.Entertainment : current-value == "Food" ?
                        Category.Food : current-value == "Work" ?
                        Category.Work : current-value == "Subscriptions" ?
                        Category.Subscriptions : current-value == "Utility" ?
                        Category.Utility : Category.Travel;
                    
                }
            }
        }

        // Category Rectangle
        icategory:= Rectangle {
            x: 0;
            height: 50px;
            width: 410px;
            in-out property <Category> category;  

            border-radius: 8px;

            background: {
                self.category == Category.Food ? 
                green : category == Category.Entertainment ?
                yellow : category == Category.Subscriptions ?
                purple : category == Category.Travel ?
                lightblue : category == Category.Utility ?
                red : blue  //work is blue!
            }


            iname := ItemInfo {
                height: parent.height;
                info_x: 0px;
            }
           
            icost := ItemInfo{
                height: parent.height;
                info_x: 200px;
            }
        }

        editInfo:= Rectangle{
            x: 360px;
            width: 23px;
            height: 23px;
            y: 0;
            z: 1;
            in-out property <bool> beingEdited : false;

            border-color: black;
            border-radius: 15px;
            border-width: 1px;
            Image {
                width: 17px;
                height: 17px;

                source: beingEdited ?
                    @image-url("../../logos/correct logo.svg") // show tick logo to showcase button for completing edits
                    : @image-url("../../logos/pencil logo.svg"); // show pencil logo to showcase button for making edits.

                colorize: black;

                TouchArea {
                    clicked => {

                        // If the text is indeed being updated, then reverse this.
                        if (editInfo.beingEdited) {
                            editInfo.beingEdited = false;

                            iname.beingEdited = false;
                            iname.read-only = true;

                            icost.beingEdited = false;
                            icost.read-only = true;
                            
                            return;
                        }

                        // If text is NOT being updated, then reverse this.
                        if (!editInfo.beingEdited) {
                            editInfo.beingEdited = true;

                            iname.beingEdited = true;
                            iname.read-only = false;

                            icost.beingEdited = true;
                            icost.read-only = false;

                            return;
                        }
                    }
                }
            }
        }

    }
}
