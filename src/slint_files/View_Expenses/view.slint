
import { ScrollView, LineEdit, CheckBox, ComboBox, Button } from "std-widgets.slint";
import {ItemContainer, Category} from "items.slint";

export struct ItemDetail {
    name: string,
    cost: string,
    category: Category
}
export component ViewPage inherits Rectangle {

    // Will become visible when 'View Expenses' button is clicked on the GUI.
    visible: false;

    // This property will be updated by the "main.rs" file's 'updateExpenses' function
    // Any change on this property will then trigger the 'changed itemDetails' function
    in-out property <[ItemDetail]> itemDetails: [
        // Will have separate behaviour when no expenses are marked.
        {
            name: "Ishan",
            cost: "24",
            category: Category.Entertainment
        }
    ];

    Rectangle {
        x: 100px;
        y: 0;
        width: 500px;
        height: 20px;
        background: #023602;
    }

    Text{
        x: 100px;
        y: 38px;
        width: 500px;
        text: "Expense Tracker";
        font-family: "Gill Sans Ultra Bold Condensed";
        font-size: 28px;
        color: #548054;
        horizontal-alignment: center;
    }

    Rectangle {
        border-width: 2px;
        border-color: black;
        x: 135px;
        y: 86px;
        width: 430px;
        height: 270px;
        
        Text { 
            // There's an 8px automatic padding on both sides of the scroll view.
            // The middle difference between the two Texts is 10px
            x: 5px;
            y: 10px;
            width: 215px;
            text: "Item Name"; 
            font-family: "Century";
            font-size: 18px;
            color: #0f9407;
            horizontal-alignment: center;
           
        }

        
        Text { 
            x: 215px;
            y: 10px;
            width: 215px;
            text: "Item Cost"; 
            font-family: "Century";
            font-size: 18px;
            color: #0f9407;
            horizontal-alignment: center;
        }
        

        sv:= ScrollView {
            x: 0px;
            y: 40px;
            width: 420px;

            // Appearance wise, this looks good.
            height: 220px;

            // Appearance wise, this looks good.
            viewport-height: itemDetails.length * 65px; //Original was 40
            
            // Automatically performs vertical spacing and alignment of items based on total height.
            VerticalLayout {
                for items[i] in root.itemDetails: ItemContainer {
                    x: 10px;

                    item_name: items.name;
                    item_cost: items.cost;
                    item_category: items.category;
                    // change_category => {
                    //     settings.visible = true;
                    //     self.changing_category = true;

                    //     if(CategoryProps.change_complete) {
                    //         self.changing_category = false;
                    //         return;
                    //     }
                    // }
                }
            }
        }

        
    }


    Rectangle {

        /* These 3 values because
            - 100px away from x (skipping the sidebar)
            - 380px away from y. Total 400, 20px reduction on height of the rectangle
            - 500px of width. (Using parent.width brings some unknown issues.) Whole window is of size 600px.
        */ 
        x: 100px;
        y: 380px;
        width: 500px;

        height: 20px;
        background: #023602;
    }
}