export component ItemInfo inherits Rectangle {

    in-out property <length> info_x: 25px;
    in-out property <bool> read-only <=> text_input.read-only;
    in-out property <string> text <=> text_input.text;

    in-out property <bool> beingEdited;

    Rectangle {
        background: white;
        x: info_x + 20 * 1px;
        width: 180px;
        height: 30px;
        border-radius: 10px;

        opacity: {
            beingEdited ?
            0.9 :
            0.5
        };

        text_input := TextInput {
            // x: info_x + 10 * 1px;
            width: 190px;
            horizontal-alignment: center;
            vertical-alignment: center;
            read-only: true;
        }
    }

    // TouchArea {
    //     x: info_x;
    //     width: 200px;
    //     y: 0;

    //     // Match whatever height I keep.
    //     height: parent.height;

    //     clicked => {
    //         // Does not allow text to be focused on if it is not editable.
    //         if (text_input.read-only && text_input.has-focus) {
    //             text_input.clear-focus();
    //         }
    //         if (!text_input.read-only) {
    //             text_input.focus();
    //             text_input.select-all();
    //         }
    //     }
    // }
    
    // editBtn := Rectangle{

    //     property <bool> beingEdited: false;

    //     x: info_x + 170 * 1px;
    //     height: 20px;
    //     width: 20px;

    //     border-radius: 10px;  //anything below half of height and width is already a circle.
    //     border-color: black;
    //     border-width: 1px;

    //     Image {
    //         visible: true;
    //         height: 12px;
    //         width: 12px;

    //         // Shows pencil logo if not being edited and correct logo if it is being edited.
    //         source: beingEdited ? 
    //             @image-url("../../logos/correct logo.svg")
    //             : @image-url("../../logos/pencil logo.svg") ;

    //         TouchArea {
    //             height: parent.height;
    //             width: parent.width;

    //             clicked => {
    //                 if(beingEdited){
    //                     beingEdited = false;
    //                     text_input.read-only = true;
    //                     text_input.clear-focus();
    //                     return;
    //                 }
    //                 if(!beingEdited){
    //                     beingEdited = true;
    //                     text_input.read-only = false;
    //                     text_input.focus();
    //                     return;
    //                 }
    //             }
    //         }
    //     }
    // }
}